/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sportsfacility;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Haseong Kim
 */
public class AdvisorUI extends javax.swing.JFrame {

    /**
     * Creates new form AdvisorUI
     */
    //AdvisorController aControl = new AdvisorController();
    AdvisorController control = new AdvisorController();
    
    public AdvisorUI() {
        displayCustomerList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void displayCustomerList() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jInternalFrame1 = new javax.swing.JInternalFrame();
        searchName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        CustomerData = new javax.swing.JTable();
        searchMembership = new javax.swing.JComboBox<>();
        searchPayAnnual = new javax.swing.JComboBox<>();
        searchMembership_Label = new javax.swing.JLabel();
        searchPayAnnual_Label = new javax.swing.JLabel();
        searchName_Label = new javax.swing.JLabel();
        search_form_Label = new javax.swing.JLabel();
        updateallButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Membership Management");
        setResizable(false);

        searchName.setToolTipText("");
        searchName.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCustomer();
            }
        });

        CustomerData.setCellSelectionEnabled(true);
        CustomerData.setColumnSelectionAllowed(false);
        CustomerData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CustomerData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Membership", "Joined Date", "Pay Annual", "Updatable"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        DefaultTableModel dtm = (DefaultTableModel)CustomerData.getModel();
        for(int i = 0; i < control.custList.size(); i++) {
          Customer temps = (Customer)control.custList.get(i);
          System.out.print(temps);
          String[] dump_data = { Integer.toString(temps.getCustomerid()), temps.getName(), temps.displayMembership(), temps.getJoinedDate().toLocaleString().split(" ")[0], temps.getIspaidannual(), control.isUpdatable(temps.getCustomerid(), false) };
          dtm.addRow(dump_data);
          CustomerData.setValueAt(temps.getCustomerid(), i, 0);
          CustomerData.setValueAt(temps.getName(), i, 1);
          CustomerData.setValueAt(temps.displayMembership(), i, 2);
          CustomerData.setValueAt(temps.getJoinedDate().toLocaleString().split(" ")[0], i, 3);
          CustomerData.setValueAt(temps.getIspaidannual(), i, 4);
          CustomerData.setValueAt(control.isUpdatable(temps.getCustomerid(), false), i, 5);
        }
        CustomerData.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(evt.getClickCount() == 2 && CustomerData.getSelectedRow() != -1) {
                    UpdateCustomerUI chIn = new UpdateCustomerUI((int) CustomerData.getValueAt(CustomerData.getSelectedRow(), 0));
                    chIn.setVisible(true);
                }
            }
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (CustomerData.isEditing())
                    CustomerData.getCellEditor().stopCellEditing();
            }
        });
        jScrollPane1.setViewportView(CustomerData);
        CustomerData.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (CustomerData.getColumnModel().getColumnCount() > 0) {
            CustomerData.getColumnModel().getColumn(0).setResizable(false);
            CustomerData.getColumnModel().getColumn(0).setPreferredWidth(20);
            CustomerData.getColumnModel().getColumn(1).setResizable(false);
            CustomerData.getColumnModel().getColumn(2).setResizable(false);
            CustomerData.getColumnModel().getColumn(2).setPreferredWidth(20);
            CustomerData.getColumnModel().getColumn(3).setResizable(false);
            CustomerData.getColumnModel().getColumn(3).setPreferredWidth(25);
            CustomerData.getColumnModel().getColumn(4).setResizable(false);
            CustomerData.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        searchMembership.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "Silver", "Gold", "Platinum" }));
        searchMembership.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomer();
            }
        });

        searchPayAnnual.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "false", "true" }));
        searchPayAnnual.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomer();
            }
        });
        searchPayAnnual.setMinimumSize(new java.awt.Dimension(114, 20));
        
        searchMembership_Label.setText("Sort by Membership");

        searchPayAnnual_Label.setText("People who pay annual fee");

        searchName_Label.setText("Search Name");
        
        updateallButton.setText("Update All");

        updateallButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAll();
            }
        });
        
        refreshButton.setText("Refresh List");
        
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshList();
            }
        });

        search_form_Label.setFont(new java.awt.Font("Tahoma", 0, 24));
        search_form_Label.setText("Search Form");
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(search_form_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchMembership, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(searchMembership_Label)
                                .addGap(8, 8, 8)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(searchPayAnnual, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(searchName, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchPayAnnual_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchName_Label)
                                .addGap(55, 55, 55))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(updateallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchMembership_Label)
                            .addComponent(searchPayAnnual_Label)
                            .addComponent(searchName_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchMembership, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchPayAnnual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(search_form_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateallButton)
                    .addComponent(refreshButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchName.getAccessibleContext().setAccessibleName("");
        searchName.getAccessibleContext().setAccessibleDescription("Search Text");

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }
    private void searchCustomer() {  
        String query;
        if(searchMembership.getSelectedIndex() != 0 && searchPayAnnual.getSelectedIndex() != 0) {
            query = "SELECT * FROM CUSTOMER WHERE MEMBERSHIP = "+(searchMembership.getSelectedIndex()-1)+" AND ISPAIDANNUAL = "+(searchPayAnnual.getSelectedIndex()-1)+" AND NAME LIKE '%"+searchName.getText()+"%'";
        } else if(searchMembership.getSelectedIndex() != 0) {
            query = "SELECT * FROM CUSTOMER WHERE MEMBERSHIP = "+(searchMembership.getSelectedIndex()-1)+" AND NAME LIKE '%"+searchName.getText()+"%'";
        } else if(searchPayAnnual.getSelectedIndex() != 0) {
            query = "SELECT * FROM CUSTOMER WHERE ISPAIDANNUAL = "+(searchPayAnnual.getSelectedIndex()-1)+" AND NAME LIKE '%"+searchName.getText()+"%'";
        } else {
            query = "SELECT * FROM CUSTOMER WHERE NAME LIKE '%"+searchName.getText()+"%'";
        }
        updateResult(query);
    }
    public void refreshList() {
        String query;
        if(searchMembership.getSelectedIndex() != 0 && searchPayAnnual.getSelectedIndex() != 0) {
            query = "SELECT * FROM CUSTOMER WHERE MEMBERSHIP = "+(searchMembership.getSelectedIndex()-1)+" AND ISPAIDANNUAL = "+(searchPayAnnual.getSelectedIndex()-1)+" AND NAME LIKE '%"+searchName.getText()+"%'";
        } else if(searchMembership.getSelectedIndex() != 0) {
            query = "SELECT * FROM CUSTOMER WHERE MEMBERSHIP = "+(searchMembership.getSelectedIndex()-1)+" AND NAME LIKE '%"+searchName.getText()+"%'";
        } else if(searchPayAnnual.getSelectedIndex() != 0) {
            query = "SELECT * FROM CUSTOMER WHERE ISPAIDANNUAL = "+(searchPayAnnual.getSelectedIndex()-1)+" AND NAME LIKE '%"+searchName.getText()+"%'";
        } else {
            query = "SELECT * FROM CUSTOMER WHERE NAME LIKE '%"+searchName.getText()+"%'";
        }
        updateResult(query);
    }
    public void updateAll() {
        boolean updated = control.updateAllCustomers();
        if(updated != true) {
            System.out.println("An error occured during the update.");
        } else {
            refreshList();
        }
    }
    public void updateResult(String query) {
        if(query.isEmpty()) {
            CustomerData.removeAll();
            System.out.println("No customer data.");
        } else {
            DefaultTableModel dtm = (DefaultTableModel)CustomerData.getModel();
            dtm.setRowCount(0);
            CustomerData.removeAll();
            control.refreshCustomerList(query+" ORDER BY CUSTOMERID ASC");
            for(int i = 0; i < control.custList.size(); i++) {
              Customer temps = (Customer)control.custList.get(i);
              String[] dump_data = { Integer.toString(temps.getCustomerid()), temps.getName(), temps.displayMembership(), temps.getJoinedDate().toLocaleString().split(" ")[0], temps.getIspaidannual(), control.isUpdatable(temps.getCustomerid(), false) };
              dtm.addRow(dump_data);
              CustomerData.setValueAt(temps.getCustomerid(), i, 0);
              CustomerData.setValueAt(temps.getName(), i, 1);
              CustomerData.setValueAt(temps.displayMembership(), i, 2);
              CustomerData.setValueAt(temps.getJoinedDate().toLocaleString().split(" ")[0], i, 3);
              CustomerData.setValueAt(temps.getIspaidannual(), i, 4);
              CustomerData.setValueAt(control.isUpdatable(temps.getCustomerid(), false), i, 5);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvisorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AdvisorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTable CustomerData;
    private javax.swing.JComboBox<String> searchMembership;
    private javax.swing.JComboBox<String> searchPayAnnual;
    private javax.swing.JTextField searchName;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton updateallButton;
    private javax.swing.JLabel searchMembership_Label, searchPayAnnual_Label, searchName_Label, search_form_Label;
    // End of variables declaration                   


}
